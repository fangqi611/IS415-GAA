{
  "hash": "da281a245a81cacd0909eaf363dc43c7",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 1: Application of Spatial Point Patterns Analysis to discover the geographical distribution of Grab hailing services in Singapore\"\ndate: \"4th February 2024\"\ndate modified: \"last-modified\"\nformat: \n  html:\n    fontsize: 18px\nexecute:\n  echo: true\n  eval: true\n  freeze: true\n  warning: false\n---\n\n\n# 0. Overview\n\nThese are the 3 datasets I will be using in Take-Home Exercise 1\n\n## 0.1 OpenStreetMap\n\nOpenStreetMap dataset consist of Malaysia, Singapore and Brunei regions in Polygon format in shp file. We are going to extract the Singapore region only, and gradually remove the outer islands of Singapore, to examine the traffic flow using GrabPosisi dataset and Master Plan 2019 Subzone Boundary (No Sea) dataset.\n\n## 0.2 Master Plan 2019 Subzone Boundary (No Sea) Dataset\n\nIn this dataset, the Planning Regions are divided into smaller Planning Areas. Each Planning Area is further divided into smaller subzones which are usually centred around a focal point such as neighbourhood centre or activity node. We will only be inspecting neighbourhoods in this dataset as the file is too big for us to inspect the the whole of Singapore. This is by taking the intersection between Master Plan 2019 and OpenStreetMap.\n\nThe Master Plan is a forward looking guiding plan for Singapore's development in the medium term over the next 10 to 15 years and the planning boundaries may not coincide with existing developments for some areas.\n\n## 0.3 Grab-Posisi - Southeast Asia’s First Comprehensive GPS Trajectory Dataset\n\nGrab-Posisi dataset contains in total 84K trajectories that consist of more than 80 million GPS pings and cover over 1 million km. The average trajectory length is 11.94 km and the average duration per trip is 21.50 minutes. Each trajectory is serialised in a file in Apache Parquet format. The whole dataset size is around 2 GB. Each GPS ping is associated with values for a trajectory ID, latitude, longitude, timestamp (UTC), accuracy level, bearing and speed. The GPS sampling rate is 1 second, which is the highest among all the existing open source datasets.\n\nWe will be using the GrabPosisi dataset to inspect only a neighburhood by taking the intersection o GrabPosisi and OpenStreetMap.\n\n# 1. Loading Data\n\nIn this section I will install and load my arrow, lubridate, sf, tmap, tidyverse, maptools, sp, raster, spatstat, spNetwork, classInt and viridis packages which will be used widely in this exercise.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(arrow, lubridate, sf, tmap, tidyverse, maptools, sp, raster, spatstat, spNetwork, classInt, viridis)\n```\n:::\n\n\n## 1.1 Importing a geospatial data, Road set layer from OpenStreetMap\n\nThere are 3 files imported here, OpenStreetMap, Master Plan 2019 Subzone Boundary (No Sea) and GrabPosisi. Importing road layer from malaysia-singapore-brunei-latest-free.shp as roads.\n\nWe could use either st_read() or readOGR() to read our geospatial data, but it is better to read it in as a simple features dataframe first and then use as_Spatial() to convert it to a Spatial\\* object when necessary. This way, I can perform visualisations on both the simple features dataframe and Spatial\\* object more easily.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- st_read(dsn = \"data/geospatial/malaysia-singapore-brunei-latest-free.shp\", layer = \"gis_osm_roads_free_1\")\n```\n:::\n\n\nTransforming roads to 3414, SVY21 file format\n\n\n::: {.cell}\n\n```{.r .cell-code}\nroads <- st_transform(roads, 3414)\nroads\n```\n:::\n\n\n## 1.2 Importing a geospatial data Master Plan 2019 Subzone Boundary (No Sea)\n\nImporting geospatial data Master Plan 2019 Subzone Boundary (No Sea) as MPSZ down below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_read(dsn = \"data/geospatial/MPSZ-2019\", layer = \"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/fangqilim/fangqi611/IS415-GAA/Take-home_Ex/Take-home_Ex01/data/geospatial/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n:::\n:::\n\n\n## 1.3 Importing a aspatial data Grab Data Frame, GrabPosisi\n\nUsing read_parquet() function to import GrabPosisi aspatial file down below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab <- read_parquet(\"data/aspatial/GrabPosisi/part-00000-8bbff892-97d2-4011-9961-703e38972569.c000.snappy.parquet\")\n```\n:::\n\n\n# 2. Getting the Geospatial Data Layer\n\n## 2.1 Extracting Grab taxi location points by origins\n\nListing GrabPosisi table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist(grab)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(grab)\n```\n:::\n\n\nWe have to transform our dataframes into sf objects, and then verify and transform our assigned CRS for our aspatial datasets. Most of these dataset are using WGS84 (ESPG Code 4326) on account of using Latitude and Longitude - so we can do these two things in one go:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_sf <- st_as_sf(grab, \n                       coords = c(\"rawlng\", \"rawlat\"),\n                       crs=4326) %>%\n  st_transform(crs = 3414)\n```\n:::\n\n\nViewing grab_sf file Checking the newly-converted Spatial\\* classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab_sf\n```\n:::\n\n\nExtracting pingtimestamp from grab dataset in order to get the origin and destination points in the next steps! pingstimestamp is the timing when the customer board or alight the car\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngrab$pingtimestamp <- as_datetime(grab$pingtimestamp)\n```\n:::\n\n\nGetting the origin points which is the location where the driver picks up the customer from:\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_grab <- grab_sf %>%\n  group_by(trj_id) %>%\n  arrange(pingtimestamp) %>%\n  filter(row_number()==1) %>%\n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         start_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\nImporting origin_grab due to the large file size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(origin_grab, \"data/rds/origin_grab.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\norigin_grab <- read_rds(\"data/rds/origin_grab.rds\")\n```\n:::\n\n\nGetting the destination points which is the location where the ride ends and where the customer alights:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndestination_grab_sf <- grab_sf %>%\n  group_by(trj_id) %>%\n  arrange(desc(pingtimestamp)) %>% \n  filter(row_number()==1) %>% \n  mutate(weekday = wday(pingtimestamp,\n                        label = TRUE,\n                        abbr = TRUE),\n         end_hr = factor(hour(pingtimestamp)),\n         day = factor(mday(pingtimestamp)))\n```\n:::\n\n\nImporting destination_grab due to the large file size so it will not cause any loading issues for us!\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(destination_grab_sf, \"data/rds/destination_grab.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ndestination_grab <- read_rds(\"data/rds/destination_grab.rds\")\n```\n:::\n\n\nReflecting origin_grab, the pick ups points in geospatial format here using origin_grab and destination_grab since we got the points already!\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode('plot')\ntm_shape(origin_grab)+\n  tm_dots()\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n## 2.2 Extracting Road layer within Singapore excluding outer islands.\n\nChecking the geometry type for mpsz\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_geometry(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeometry set for 332 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 332\nColumns: 7\n$ SUBZONE_N  <chr> \"MARINA EAST\", \"INSTITUTION HILL\", \"ROBERTSON QUAY\", \"JURON…\n$ SUBZONE_C  <chr> \"MESZ01\", \"RVSZ05\", \"SRSZ01\", \"WISZ01\", \"MUSZ02\", \"MPSZ05\",…\n$ PLN_AREA_N <chr> \"MARINA EAST\", \"RIVER VALLEY\", \"SINGAPORE RIVER\", \"WESTERN …\n$ PLN_AREA_C <chr> \"ME\", \"RV\", \"SR\", \"WI\", \"MU\", \"MP\", \"WI\", \"WI\", \"SI\", \"SI\",…\n$ REGION_N   <chr> \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"WEST…\n$ REGION_C   <chr> \"CR\", \"CR\", \"CR\", \"WR\", \"CR\", \"CR\", \"WR\", \"WR\", \"CR\", \"CR\",…\n$ geometry   <MULTIPOLYGON [°]> MULTIPOLYGON (((103.8802 1...., MULTIPOLYGON (…\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(mpsz, n=5)  \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 5 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6537 ymin: 1.216215 xmax: 103.8811 ymax: 1.29742\nGeodetic CRS:  WGS 84\n                SUBZONE_N SUBZONE_C      PLN_AREA_N PLN_AREA_C       REGION_N\n1             MARINA EAST    MESZ01     MARINA EAST         ME CENTRAL REGION\n2        INSTITUTION HILL    RVSZ05    RIVER VALLEY         RV CENTRAL REGION\n3          ROBERTSON QUAY    SRSZ01 SINGAPORE RIVER         SR CENTRAL REGION\n4 JURONG ISLAND AND BUKOM    WISZ01 WESTERN ISLANDS         WI    WEST REGION\n5            FORT CANNING    MUSZ02          MUSEUM         MU CENTRAL REGION\n  REGION_C                       geometry\n1       CR MULTIPOLYGON (((103.8802 1....\n2       CR MULTIPOLYGON (((103.8376 1....\n3       CR MULTIPOLYGON (((103.8341 1....\n4       WR MULTIPOLYGON (((103.7125 1....\n5       CR MULTIPOLYGON (((103.8472 1....\n```\n:::\n:::\n\n\nPlotting mpsz with the outer islands\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-21-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: WGS 84 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"latitude\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"longitude\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    ID[\"EPSG\",4326]]\n```\n:::\n:::\n\n\nTransforming mpsz t0 3414, SVY21 as that is the file format we want for all of our data, similar to what we did for the grab dataset\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz3414 <- st_transform(mpsz, 3414)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n:::\n:::\n\n\nExtracting PLN_AREA_N from mpsz3414, Singapore island without it's outer islands as that is what we want and we do this first so it is easier to reflect the GrabPosisi and OpenStreetMap later on\n\n\n::: {.cell}\n\n```{.r .cell-code}\nouter_islands <- mpsz3414[grep(\"island\", mpsz3414$PLN_AREA_N, ignore.case = TRUE), ]\nprint(outer_islands)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSimple feature collection with 6 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 8012.578 ymin: 15748.72 xmax: 56396.44 ymax: 46931.6\nProjected CRS: SVY21 / Singapore TM\n                  SUBZONE_N SUBZONE_C            PLN_AREA_N PLN_AREA_C\n4   JURONG ISLAND AND BUKOM    WISZ01       WESTERN ISLANDS         WI\n7                    SUDONG    WISZ03       WESTERN ISLANDS         WI\n8                   SEMAKAU    WISZ02       WESTERN ISLANDS         WI\n9            SOUTHERN GROUP    SISZ02      SOUTHERN ISLANDS         SI\n10                  SENTOSA    SISZ01      SOUTHERN ISLANDS         SI\n304   NORTH-EASTERN ISLANDS    NESZ01 NORTH-EASTERN ISLANDS         NE\n             REGION_N REGION_C                       geometry\n4         WEST REGION       WR MULTIPOLYGON (((14557.7 304...\n7         WEST REGION       WR MULTIPOLYGON (((15772.59 21...\n8         WEST REGION       WR MULTIPOLYGON (((19843.41 21...\n9      CENTRAL REGION       CR MULTIPOLYGON (((30870.53 22...\n10     CENTRAL REGION       CR MULTIPOLYGON (((26879.04 26...\n304 NORTH-EAST REGION      NER MULTIPOLYGON (((52567.44 46...\n```\n:::\n:::\n\n\nSubtracting the geometry of the union of the outer islands from the geometry in mpsz3414 we get the costal region of SG without the outer islands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nouterislands_sf <- st_difference(mpsz3414, st_union(outer_islands))\nplot(outerislands_sf)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\nExtracting roads in Singapore within Singapore boundary without outer islands, sgroads usibg outerislands_sf and roafs intersection we only get the roads in SG. Checking the newly-converted Spatial\\* classes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsgroads <- st_intersection(outerislands_sf, roads)\nsgroads\n```\n:::\n\n\nImporting sgroads due to the large file size\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(sgroads, \"data/rds/sgroads.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsgroads <- read_rds(\"data/rds/sgroads.rds\")\n```\n:::\n\n\n## 2.3 Extracting Singapore boundary layer excluding outer islands\n\nA representation of Singapore's geographical boundary, omitting the outer islands\n\n\n::: {.cell}\n\n```{.r .cell-code}\nouterislands_sf <- outerislands_sf %>%\n  st_union() \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(outerislands_sf)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(outerislands_sf))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n### 2.3.1 Creating owin object\n\nConverting sf format for outer islands into spatial class the sp format because you cannot do it directly.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nouterislands <- as_Spatial(outerislands_sf)\n```\n:::\n\n\nSpatstat requires the analytical data to be in ppp object form, but since there is no way to directly convert a Spatial\\* classes into ppp object, we’ll need to convert the Spatial\\* classes into a generic Spatial object first, then convert the generic sp object into ppp object form.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nouterislands_sp <- as(outerislands, \"SpatialPolygons\")\n```\n:::\n\n\nChecking the newly-converted Spatial\\* classes\n\n\n::: {.cell}\n\n```{.r .cell-code}\nouterislands_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nclass       : SpatialPolygons \nfeatures    : 1 \nextent      : 2667.538, 55941.94, 21448.47, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n```\n:::\n:::\n\n\nI am confining the analysis with a geographical area. In spatstat, the object called owin is specially designed to represent this polygonal region. This produces the Singapore boundary layer excluding outer islands.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as(outerislands_sp, \"owin\")\n```\n:::\n\n\nUsually, when analysing spatial point patterns, we’ll confine our analysis within a certain geographical area - such as the Singapore boundary. In spatstat, an object called owin is specially designed to represent this polygonal region.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sg_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(sg_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nWindow: polygonal boundary\n37 separate polygons (29 holes)\n                  vertices         area relative.area\npolygon 1               71  5.63061e+03      8.47e-06\npolygon 2               10  1.99717e+02      3.01e-07\npolygon 3            12667  6.63014e+08      9.98e-01\npolygon 4 (hole)         3 -3.41897e-05     -5.14e-14\npolygon 5 (hole)        23 -1.99656e+01     -3.00e-08\npolygon 6 (hole)        35 -1.38385e+02     -2.08e-07\npolygon 7 (hole)        19 -4.39650e+00     -6.62e-09\npolygon 8 (hole)       270 -1.21455e+03     -1.83e-06\npolygon 9 (hole)         3 -4.95057e-02     -7.45e-11\npolygon 10 (hole)        3 -3.65499e-03     -5.50e-12\npolygon 11 (hole)        3 -7.43616e-06     -1.12e-14\npolygon 12 (hole)        3 -3.39794e-04     -5.11e-13\npolygon 13 (hole)       38 -7.79904e+03     -1.17e-05\npolygon 14 (hole)        3 -5.99535e-04     -9.02e-13\npolygon 15 (hole)        3 -3.04561e-04     -4.58e-13\npolygon 16 (hole)        6 -8.37554e-01     -1.26e-09\npolygon 17 (hole)        3 -4.46076e-04     -6.71e-13\npolygon 18 (hole)        4 -2.86396e-01     -4.31e-10\npolygon 19 (hole)        3 -1.81439e-04     -2.73e-13\npolygon 20 (hole)        3 -8.68789e-04     -1.31e-12\npolygon 21 (hole)      317 -5.11280e+04     -7.69e-05\npolygon 22 (hole)        5 -2.92235e-04     -4.40e-13\npolygon 23 (hole)        5 -2.44411e-04     -3.68e-13\npolygon 24 (hole)        4 -2.18616e-04     -3.29e-13\npolygon 25 (hole)        4 -4.28453e-01     -6.45e-10\npolygon 26 (hole)        4 -2.54488e-04     -3.83e-13\npolygon 27 (hole)        3 -9.59850e-05     -1.44e-13\npolygon 28 (hole)       41 -4.01660e+04     -6.04e-05\npolygon 29 (hole)        3 -4.14099e-04     -6.23e-13\npolygon 30 (hole)        3 -4.52043e-05     -6.80e-14\npolygon 31 (hole)        3 -3.90173e-05     -5.87e-14\npolygon 32 (hole)        5 -3.64686e-02     -5.49e-11\npolygon 33              30  2.80002e+04      4.21e-05\npolygon 34              27  1.50315e+04      2.26e-05\npolygon 35             285  1.61128e+06      2.42e-03\npolygon 36              91  1.49663e+04      2.25e-05\npolygon 37              71  8.18750e+03      1.23e-05\nenclosing rectangle: [2667.54, 55941.94] x [21448.47, 50256.33] units\n                     (53270 x 28810 units)\nWindow area = 664597000 square units\nFraction of frame area: 0.433\n```\n:::\n:::\n\n\n# 3. Deriving traditional Kernel Density Estimation (KDE) layers\n\nThis is derived using the grab dataset This code below is converting a spatial dataset named \"origin_grab\" into a format suitable for analyzing and studying point patterns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\norigingrab_ppp <- as.ppp(origin_grab)\n```\n:::\n\n\nRetrieving more information of origingrab_ppp\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(origingrab_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMarked planar point pattern:  28000 points\nAverage intensity 2.47621e-05 points per square unit\n\nCoordinates are given to 3 decimal places\ni.e. rounded to the nearest multiple of 0.001 units\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n    28000 character character \n\nWindow: rectangle = [3661.47, 49845.23] x [25201.14, 49685.08] units\n                    (46180 x 24480 units)\nWindow area = 1130760000 square units\n```\n:::\n:::\n\n\nPlotting it out\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(origingrab_ppp)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nPlotting origin_grab, whole of Singapore\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(origin_grab)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n## 3.1 Converting owin object into ppp format\n\nThis is so that we can remove duplicated points\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(outerislands_sf)\n#as.ppp to convert point table\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(sg_owin)\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\nExtracting the specific areas in Singapore which is Ponggol, Tampines, Choa Chu Kang and Jurong West respectively\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg <- mpsz %>%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntm <- mpsz %>%\n  filter(PLN_AREA_N == \"TAMPINES\")\nck <- mpsz %>%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njw <- mpsz %>%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n```\n:::\n\n\nWe are plotting each area one by one, Ponggol, Tampines, Choa Chu Kang and Jurong West respectively below. Punggol layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(pg, main = \"Ponggol\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\nTampines layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(tm, main = \"Tampines\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\nChoa Chu Kang layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(ck, main = \"Choa Chu Kang\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\nJurong West layer\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(jw, main = \"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex01_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}